{"version":3,"file":"index.js","sources":["../src/lib/constants.js","../src/lib/utils.js","../src/lib/vuePopulator.js"],"sourcesContent":["export const constants = {\n    PRETTIFY_CHARS_TO_CHECK: ['-', '_'],\n};\n\nexport default constants;\n","import { constants } from './constants.js';\n\n/**\n * Returns the first character of a given string\n * @param {String} value\n */\nexport const getStringFirstChar = (value) => {\n    if (!value) return '';\n    return value.charAt(0);\n};\n\n/**\n * Returns the capitalized value of the given value\n * @param {Any} value\n */\nexport const getCapitalizedString = (value) => {\n    if (!value) return '';\n\n    const stringifiedValue = value.toString();\n    return getStringFirstChar(stringifiedValue).toUpperCase() + stringifiedValue.slice(1);\n};\n\n/**\n * Returns the prettiefied value of the given value. It means removing all the dashes and underscores found\n * @param {Any} value\n */\nexport const getPrettifiedString = (value) => {\n    if (!value) return '';\n\n    const stringifiedValue = value.toString();\n    const { PRETTIFY_CHARS_TO_CHECK: prettifyChars } = constants;\n\n    return prettifyChars.reduce((acc, char) => {\n        const firstCharMatch = acc.startsWith(char);\n        const splittedValue = acc.split(char);\n\n        if (firstCharMatch || splittedValue.length === 1) {\n            splittedValue.forEach((partialValue, index) => {\n                if ((!index && !firstCharMatch) || !partialValue) return;\n                splittedValue[index] = getStringFirstChar(partialValue).toUpperCase() + partialValue.slice(1);\n            });\n        }\n\n        return splittedValue.join('');\n    }, stringifiedValue);\n};\n","import { getCapitalizedString, getPrettifiedString } from './utils.js';\n\n// Default export for the Vue Populator\nconst vuePopulator = (context) => {\n    const { $data: data } = context ?? {};\n    if (!data || typeof data !== 'object' || Array.isArray(data)) return;\n\n    // Loop over the data properties of the Vue context\n    Object.keys(data).forEach((key) => {\n        // First prettify the key\n        const prettyKey = getCapitalizedString(getPrettifiedString(key));\n        // Then prepare the requiered methods and computed properties\n\n        // Create the setter for the current key\n        context[`set${prettyKey}`] = (newValue) => (context[key] = newValue);\n        // Create the boolean getter for the current key\n        Object.defineProperty(context, `has${prettyKey}`, {\n            get() {\n                return !!context[key];\n            },\n        });\n    });\n};\n\nexport default vuePopulator;\n"],"names":["constants","PRETTIFY_CHARS_TO_CHECK","getStringFirstChar","value","charAt","context","$data","data","Array","isArray","Object","keys","forEach","key","prettyKey","stringifiedValue","toString","toUpperCase","slice","getCapitalizedString","prettifyChars","reduce","acc","char","firstCharMatch","startsWith","splittedValue","split","length","partialValue","index","join","getPrettifiedString","newValue","defineProperty","get"],"mappings":"uDAAO,MAAMA,EAAY,CACrBC,wBAAyB,CAAC,IAAK,MCKtBC,EAAsBC,GAC1BA,EACEA,EAAMC,OAAO,GADD,mBCJDC,IAClB,MAAQC,MAAOC,GAASF,GAAW,GAC9BE,GAAwB,iBAATA,IAAqBC,MAAMC,QAAQF,IAGvDG,OAAOC,KAAKJ,GAAMK,SAASC,IAEvB,MAAMC,EDKsB,CAACX,IACjC,IAAKA,EAAO,MAAO,GAEnB,MAAMY,EAAmBZ,EAAMa,WAC/B,OAAOd,EAAmBa,GAAkBE,cAAgBF,EAAiBG,MAAM,ICT7DC,CDgBS,CAAChB,IAChC,IAAKA,EAAO,MAAO,GAEnB,MAAMY,EAAmBZ,EAAMa,YACvBf,wBAAyBmB,GAAkBpB,EAEnD,OAAOoB,EAAcC,QAAO,CAACC,EAAKC,KAC9B,MAAMC,EAAiBF,EAAIG,WAAWF,GAChCG,EAAgBJ,EAAIK,MAAMJ,GAShC,OAPIC,GAA2C,IAAzBE,EAAcE,SAChCF,EAAcd,SAAQ,CAACiB,EAAcC,MAC3BA,GAAUN,IAAoBK,IACpCH,EAAcI,GAAS5B,EAAmB2B,GAAcZ,cAAgBY,EAAaX,MAAM,OAI5FQ,EAAcK,KAAK,MAC3BhB,IClCwCiB,CAAoBnB,IAI3DR,EAAQ,MAAMS,KAAgBmB,GAAc5B,EAAQQ,GAAOoB,EAE3DvB,OAAOwB,eAAe7B,EAAS,MAAMS,IAAa,CAC9CqB,IAAG,MACU9B,EAAQQ"}